import jax
import jax.numpy as jnp

# This file and its content are generated by generate_dynamics.py

def generate_dynamics_with_2_poles(mc, g, pole_ms, pole_ls, pole_as, pole_ds, pole_Js):
	m1, l1, a1, d1, J1 = pole_ms[0], pole_ls[0], pole_as[0], pole_ds[0], pole_Js[0]
	m2, l2, a2, d2, J2 = pole_ms[1], pole_ls[1], pole_as[1], pole_ds[1], pole_Js[1]

	@jax.jit
	def dynamics_function(state: jnp.ndarray, action: jnp.ndarray) -> jnp.ndarray:
		s, ds, theta1, dtheta1, theta2, dtheta2 = state
		dds = action[0]
		ddtheta1 = (-J2*a1*dds*m1*jnp.cos(theta1) + J2*a1*g*m1*jnp.sin(theta1) - J2*a2*dtheta2**2*l1*m2*jnp.sin(theta1 - theta2) - J2*d1*dtheta1 - J2*d2*dtheta1 + J2*d2*dtheta2 - J2*dds*l1*m2*jnp.cos(theta1) + J2*g*l1*m2*jnp.sin(theta1) - a1*a2**2*dds*m1*m2*jnp.cos(theta1) + a1*a2**2*g*m1*m2*jnp.sin(theta1) - a2**3*dtheta2**2*l1*m2**2*jnp.sin(theta1 - theta2) - a2**2*d1*dtheta1*m2 - a2**2*d2*dtheta1*m2 + a2**2*d2*dtheta2*m2 - a2**2*dds*l1*m2**2*jnp.cos(theta1)/2 + a2**2*dds*l1*m2**2*jnp.cos(theta1 - 2*theta2)/2 - a2**2*dtheta1**2*l1**2*m2**2*jnp.sin(2*theta1 - 2*theta2)/2 + a2**2*g*l1*m2**2*jnp.sin(theta1)/2 + a2**2*g*l1*m2**2*jnp.sin(theta1 - 2*theta2)/2 - a2*d2*dtheta1*l1*m2*jnp.cos(theta1 - theta2) + a2*d2*dtheta2*l1*m2*jnp.cos(theta1 - theta2))/(J1*J2 + J1*a2**2*m2 + J2*a1**2*m1 + J2*l1**2*m2 + a1**2*a2**2*m1*m2 - a2**2*l1**2*m2**2*jnp.cos(theta1 - theta2)**2 + a2**2*l1**2*m2**2)
		ddtheta2 = (-J1*a2*dds*m2*jnp.cos(theta2) + J1*a2*dtheta1**2*l1*m2*jnp.sin(theta1 - theta2) + J1*a2*g*m2*jnp.sin(theta2) + J1*d2*dtheta1 - J1*d2*dtheta2 - a1**2*a2*dds*m1*m2*jnp.cos(theta2) + a1**2*a2*dtheta1**2*l1*m1*m2*jnp.sin(theta1 - theta2) + a1**2*a2*g*m1*m2*jnp.sin(theta2) + a1**2*d2*dtheta1*m1 - a1**2*d2*dtheta2*m1 + a1*a2*dds*l1*m1*m2*jnp.cos(theta2)/2 + a1*a2*dds*l1*m1*m2*jnp.cos(2*theta1 - theta2)/2 - a1*a2*g*l1*m1*m2*jnp.sin(theta2)/2 - a1*a2*g*l1*m1*m2*jnp.sin(2*theta1 - theta2)/2 + a2**2*dtheta2**2*l1**2*m2**2*jnp.sin(2*theta1 - 2*theta2)/2 + a2*d1*dtheta1*l1*m2*jnp.cos(theta1 - theta2) + a2*d2*dtheta1*l1*m2*jnp.cos(theta1 - theta2) - a2*d2*dtheta2*l1*m2*jnp.cos(theta1 - theta2) - a2*dds*l1**2*m2**2*jnp.cos(theta2)/2 + a2*dds*l1**2*m2**2*jnp.cos(2*theta1 - theta2)/2 + a2*dtheta1**2*l1**3*m2**2*jnp.sin(theta1 - theta2) + a2*g*l1**2*m2**2*jnp.sin(theta2)/2 - a2*g*l1**2*m2**2*jnp.sin(2*theta1 - theta2)/2 + d2*dtheta1*l1**2*m2 - d2*dtheta2*l1**2*m2)/(J1*J2 + J1*a2**2*m2 + J2*a1**2*m1 + J2*l1**2*m2 + a1**2*a2**2*m1*m2 - a2**2*l1**2*m2**2*jnp.cos(theta1 - theta2)**2 + a2**2*l1**2*m2**2)
		dstate = jnp.array([ds, dds, dtheta1, ddtheta1, dtheta2, ddtheta2])
		return dstate

	@jax.jit
	def observation_function(state: jnp.ndarray, action: jnp.ndarray) -> jnp.ndarray:
		s, ds, theta1, dtheta1, theta2, dtheta2 = state
		dds = action[0]
		tau = (-1.0*J1*J2*a1*dtheta1**2*m1*jnp.sin(theta1) - 1.0*J1*J2*a2*dtheta2**2*m2*jnp.sin(theta2) + 1.0*J1*J2*dds*m1 + 1.0*J1*J2*dds*m2 + 1.0*J1*J2*dds*mc - 1.0*J1*J2*dtheta1**2*l1*m2*jnp.sin(theta1) - 1.0*J1*a1*a2**2*dtheta1**2*m1*m2*jnp.sin(theta1) - 1.0*J1*a2**3*dtheta2**2*m2**2*jnp.sin(theta2) + 1.0*J1*a2**2*dds*m1*m2 - 1.0*J1*a2**2*dds*m2**2*jnp.cos(theta2)**2 + 1.0*J1*a2**2*dds*m2**2 + 1.0*J1*a2**2*dds*m2*mc - 1.0*J1*a2**2*dtheta1**2*l1*m2**2*jnp.sin(theta1) + 1.0*J1*a2**2*dtheta1**2*l1*m2**2*jnp.sin(theta1 - theta2)*jnp.cos(theta2) + 0.5*J1*a2**2*g*m2**2*jnp.sin(2*theta2) + 1.0*J1*a2*d2*dtheta1*m2*jnp.cos(theta2) - 1.0*J1*a2*d2*dtheta2*m2*jnp.cos(theta2) - 1.0*J2*a1**3*dtheta1**2*m1**2*jnp.sin(theta1) - 1.0*J2*a1**2*a2*dtheta2**2*m1*m2*jnp.sin(theta2) - 1.0*J2*a1**2*dds*m1**2*jnp.cos(theta1)**2 + 1.0*J2*a1**2*dds*m1**2 + 1.0*J2*a1**2*dds*m1*m2 + 1.0*J2*a1**2*dds*m1*mc - 1.0*J2*a1**2*dtheta1**2*l1*m1*m2*jnp.sin(theta1) + 0.5*J2*a1**2*g*m1**2*jnp.sin(2*theta1) - 1.0*J2*a1*a2*dtheta2**2*l1*m1*m2*jnp.sin(theta1 - theta2)*jnp.cos(theta1) - 1.0*J2*a1*d1*dtheta1*m1*jnp.cos(theta1) - 1.0*J2*a1*d2*dtheta1*m1*jnp.cos(theta1) + 1.0*J2*a1*d2*dtheta2*m1*jnp.cos(theta1) - 2.0*J2*a1*dds*l1*m1*m2*jnp.cos(theta1)**2 - 1.0*J2*a1*dtheta1**2*l1**2*m1*m2*jnp.sin(theta1) + 1.0*J2*a1*g*l1*m1*m2*jnp.sin(2*theta1) - 1.0*J2*a2*dtheta2**2*l1**2*m2**2*jnp.sin(theta2) - 1.0*J2*a2*dtheta2**2*l1**2*m2**2*jnp.sin(theta1 - theta2)*jnp.cos(theta1) - 1.0*J2*d1*dtheta1*l1*m2*jnp.cos(theta1) - 1.0*J2*d2*dtheta1*l1*m2*jnp.cos(theta1) + 1.0*J2*d2*dtheta2*l1*m2*jnp.cos(theta1) + 1.0*J2*dds*l1**2*m1*m2 - 1.0*J2*dds*l1**2*m2**2*jnp.cos(theta1)**2 + 1.0*J2*dds*l1**2*m2**2 + 1.0*J2*dds*l1**2*m2*mc - 1.0*J2*dtheta1**2*l1**3*m2**2*jnp.sin(theta1) + 0.5*J2*g*l1**2*m2**2*jnp.sin(2*theta1) - 1.0*a1**3*a2**2*dtheta1**2*m1**2*m2*jnp.sin(theta1) - 1.0*a1**2*a2**3*dtheta2**2*m1*m2**2*jnp.sin(theta2) - 1.0*a1**2*a2**2*dds*m1**2*m2*jnp.cos(theta1)**2 + 1.0*a1**2*a2**2*dds*m1**2*m2 - 1.0*a1**2*a2**2*dds*m1*m2**2*jnp.cos(theta2)**2 + 1.0*a1**2*a2**2*dds*m1*m2**2 + 1.0*a1**2*a2**2*dds*m1*m2*mc - 1.0*a1**2*a2**2*dtheta1**2*l1*m1*m2**2*jnp.sin(theta1) + 1.0*a1**2*a2**2*dtheta1**2*l1*m1*m2**2*jnp.sin(theta1 - theta2)*jnp.cos(theta2) + 0.5*a1**2*a2**2*g*m1**2*m2*jnp.sin(2*theta1) + 0.5*a1**2*a2**2*g*m1*m2**2*jnp.sin(2*theta2) + 1.0*a1**2*a2*d2*dtheta1*m1*m2*jnp.cos(theta2) - 1.0*a1**2*a2*d2*dtheta2*m1*m2*jnp.cos(theta2) - 1.0*a1*a2**3*dtheta2**2*l1*m1*m2**2*jnp.sin(theta1 - theta2)*jnp.cos(theta1) - 1.0*a1*a2**2*d1*dtheta1*m1*m2*jnp.cos(theta1) - 1.0*a1*a2**2*d2*dtheta1*m1*m2*jnp.cos(theta1) + 1.0*a1*a2**2*d2*dtheta2*m1*m2*jnp.cos(theta1) - 2.0*a1*a2**2*dds*l1*m1*m2**2*jnp.cos(theta1)**2 + 2.0*a1*a2**2*dds*l1*m1*m2**2*jnp.cos(theta1)*jnp.cos(theta2)*jnp.cos(theta1 - theta2) - 0.25*a1*a2**2*dtheta1**2*l1**2*m1*m2**2*(jnp.sin(theta1 - 2*theta2) + jnp.sin(3*theta1 - 2*theta2)) + 1.0*a1*a2**2*dtheta1**2*l1**2*m1*m2**2*jnp.sin(theta1)*jnp.cos(theta1 - theta2)**2 - 1.0*a1*a2**2*dtheta1**2*l1**2*m1*m2**2*jnp.sin(theta1) - 1.0*a1*a2**2*g*l1*m1*m2**2*jnp.sin(theta1)*jnp.cos(theta2)*jnp.cos(theta1 - theta2) + 1.0*a1*a2**2*g*l1*m1*m2**2*jnp.sin(2*theta1) - 1.0*a1*a2**2*g*l1*m1*m2**2*jnp.sin(theta2)*jnp.cos(theta1)*jnp.cos(theta1 - theta2) - 1.0*a1*a2*d2*dtheta1*l1*m1*m2*jnp.cos(theta1)*jnp.cos(theta1 - theta2) + 1.0*a1*a2*d2*dtheta2*l1*m1*m2*jnp.cos(theta1)*jnp.cos(theta1 - theta2) + 0.25*a2**3*dtheta2**2*l1**2*m2**3*(jnp.sin(2*theta1 - 3*theta2) + jnp.sin(2*theta1 - theta2)) + 1.0*a2**3*dtheta2**2*l1**2*m2**3*jnp.sin(theta2)*jnp.cos(theta1 - theta2)**2 - 1.0*a2**3*dtheta2**2*l1**2*m2**3*jnp.sin(theta2) - 1.0*a2**3*dtheta2**2*l1**2*m2**3*jnp.sin(theta1 - theta2)*jnp.cos(theta1) - 1.0*a2**2*d1*dtheta1*l1*m2**2*jnp.cos(theta1) + 1.0*a2**2*d1*dtheta1*l1*m2**2*jnp.cos(theta2)*jnp.cos(theta1 - theta2) - 1.0*a2**2*d2*dtheta1*l1*m2**2*jnp.cos(theta1) + 1.0*a2**2*d2*dtheta1*l1*m2**2*jnp.cos(theta2)*jnp.cos(theta1 - theta2) + 1.0*a2**2*d2*dtheta2*l1*m2**2*jnp.cos(theta1) - 1.0*a2**2*d2*dtheta2*l1*m2**2*jnp.cos(theta2)*jnp.cos(theta1 - theta2) - 1.0*a2**2*dds*l1**2*m1*m2**2*jnp.cos(theta1 - theta2)**2 + 1.0*a2**2*dds*l1**2*m1*m2**2 - 1.0*a2**2*dds*l1**2*m2**3*jnp.cos(theta1)**2 + 2.0*a2**2*dds*l1**2*m2**3*jnp.cos(theta1)*jnp.cos(theta2)*jnp.cos(theta1 - theta2) - 1.0*a2**2*dds*l1**2*m2**3*jnp.cos(theta2)**2 - 1.0*a2**2*dds*l1**2*m2**3*jnp.cos(theta1 - theta2)**2 + 1.0*a2**2*dds*l1**2*m2**3 - 1.0*a2**2*dds*l1**2*m2**2*mc*jnp.cos(theta1 - theta2)**2 + 1.0*a2**2*dds*l1**2*m2**2*mc - 0.25*a2**2*dtheta1**2*l1**3*m2**3*(jnp.sin(theta1 - 2*theta2) + jnp.sin(3*theta1 - 2*theta2)) + 1.0*a2**2*dtheta1**2*l1**3*m2**3*jnp.sin(theta1)*jnp.cos(theta1 - theta2)**2 - 1.0*a2**2*dtheta1**2*l1**3*m2**3*jnp.sin(theta1) + 1.0*a2**2*dtheta1**2*l1**3*m2**3*jnp.sin(theta1 - theta2)*jnp.cos(theta2) - 1.0*a2**2*g*l1**2*m2**3*jnp.sin(theta1)*jnp.cos(theta2)*jnp.cos(theta1 - theta2) + 0.5*a2**2*g*l1**2*m2**3*jnp.sin(2*theta1) - 1.0*a2**2*g*l1**2*m2**3*jnp.sin(theta2)*jnp.cos(theta1)*jnp.cos(theta1 - theta2) + 0.5*a2**2*g*l1**2*m2**3*jnp.sin(2*theta2) - 1.0*a2*d2*dtheta1*l1**2*m2**2*jnp.cos(theta1)*jnp.cos(theta1 - theta2) + 1.0*a2*d2*dtheta1*l1**2*m2**2*jnp.cos(theta2) + 1.0*a2*d2*dtheta2*l1**2*m2**2*jnp.cos(theta1)*jnp.cos(theta1 - theta2) - 1.0*a2*d2*dtheta2*l1**2*m2**2*jnp.cos(theta2))/(J1*J2 + J1*a2**2*m2 + J2*a1**2*m1 + J2*l1**2*m2 + a1**2*a2**2*m1*m2 - a2**2*l1**2*m2**2*jnp.cos(theta1 - theta2)**2 + a2**2*l1**2*m2**2)
		observation = jnp.array([s, ds, theta1, dtheta1, theta2, dtheta2, tau])
		return observation

	return dynamics_function, observation_function