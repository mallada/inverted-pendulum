import jax
import jax.numpy as jnp

# This file and its content are generated by generate_dynamics.py

def generate_dynamics_with_1_poles(mc, g, pole_ms, pole_ls, pole_as, pole_ds, pole_Js):
	m1, l1, a1, d1, J1 = pole_ms[0], pole_ls[0], pole_as[0], pole_ds[0], pole_Js[0]

	@jax.jit
	def dynamics_function(state: jnp.ndarray, action: jnp.ndarray) -> jnp.ndarray:
		s, ds, theta1, dtheta1 = state
		dds = action[0]
		ddtheta1 = (-a1*dds*m1*jnp.cos(theta1) + a1*g*m1*jnp.sin(theta1) - d1*dtheta1)/(J1 + a1**2*m1)
		dstate = jnp.array([ds, dds, dtheta1, ddtheta1])
		return dstate

	@jax.jit
	def observation_function(state: jnp.ndarray, action: jnp.ndarray) -> jnp.ndarray:
		s, ds, theta1, dtheta1 = state
		dds = action[0]
		tau = (-J1*a1*dtheta1**2*m1*jnp.sin(theta1) + J1*dds*m1 + J1*dds*mc - a1**3*dtheta1**2*m1**2*jnp.sin(theta1) - a1**2*dds*m1**2*jnp.cos(theta1)**2 + a1**2*dds*m1**2 + a1**2*dds*m1*mc + a1**2*g*m1**2*jnp.sin(2*theta1)/2 - a1*d1*dtheta1*m1*jnp.cos(theta1))/(J1 + a1**2*m1)
		observation = jnp.array([s, ds, theta1, dtheta1, tau])
		return observation

	return dynamics_function, observation_function